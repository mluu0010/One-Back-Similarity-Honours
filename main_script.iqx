********************************************************************************
********************************************************************************
One Back Colour Similarity Experiment

By: Matthew Lu
Created: 11/03/2021
********************************************************************************
********************************************************************************

********************************************************************************
********************************************************************************
Include
********************************************************************************
********************************************************************************
<include>
/file = "response.iqx"
/file = "stimuli_pairs.iqx"
/ file = "EEG_Triggers.iqx"
</include>

********************************************************************************
********************************************************************************
Initialised Constants
********************************************************************************
********************************************************************************
<values>
/response_time = 0
/fixationduration = 1000
/current_colour = ""
/previous_colour = ""
/timeout = 1250
/trial_number = 0
/trial_number_practice = 0
/number_of_patch_practice = 10
/number_of_patch = 162
/colour1 = #ff0000
/colour2 = #ffaa00
/colour3 = #aaff00
/colour4 = #00ff00
/colour5 = #00ffa9
/colour6 = #00a9ff
/colour7 = #0000ff
/colour8 = #aa00ff
/colour9 = #ff00aa
/completed = 0
</values>

********************************************************************************
********************************************************************************

Defaults
********************************************************************************
********************************************************************************
<defaults>
/screencolor = (127, 127, 127)
</defaults>

********************************************************************************
********************************************************************************
Data
********************************************************************************
********************************************************************************

*************
*************
build:							Inquisit build..
date, time, subject, group:		date and time script was run with the current subject/groupnumber 
blockcode, blocknum:			the name and number of the current block
trialcode, trialnum: 			the name and number of the currently recorded trial
									(Note: not all trials that are run might record data) 
stimulusitem:					the presented stimuli in order of trial presentation
response:						the participant's response
correct:						the correctness of the response (1 = correct; 0 = incorrect)
latency: 						the response latency (in ms)
*************
*************

<data>
/file = "similarity_EEG.iqdat"
/columns = [build, date, time, subject, group, blockcode, blocknum, trialcode, response, latency, values.trial_number, values.trial_number_practice, values.previous_colour, values.current_colour, values.similarity,
values.response_time]
/separatefiles = true
</data>

<summarydata>
/file = "similarity_EEG.iqdat"
/columns = (script.startdate, script.starttime, script.subjectid, script.groupid, script.elapsedtime, computer.platform, computer.os, computer.countrycode, values.completed)
/ separatefiles = true
</summarydata>
********************************************************************************
********************************************************************************
Instructions, Complete, Survey Pages 
********************************************************************************
********************************************************************************
<htmlpage overview>
/ file = "experiment_overview.html"
</htmlpage>


<htmlpage complete>
/ file = "complete.html"
</htmlpage>


<htmlpage practice_instructions>
/ file = "practice_instructions_page.html"
</htmlpage>


<htmlpage trial_instructions>
/ file = "trial_instructions_page.html"
</htmlpage>


<htmlpage finish_block>
/ file = "finish_block.html"
</htmlpage>


<include>
/file = "include_participant_demographics.iqx"
</include>

********************************************************************************
********************************************************************************
Stimuli and Lists 
********************************************************************************
********************************************************************************

<list colours>
/ items = (values.colour1, values.colour2, values.colour3, values.colour4, values.colour5, 
values.colour6, values.colour7, values.colour8, values.colour9)
/ itemprobabilities = uniform
/ poolsize = (45)
/ selectionrate = always
/ resetinterval = 1
</list>

<shape circle_1>
/ shape = circle
/ size = (350, 350)
/ hposition = 50%
/ vposition = 50%
</shape>

<shape circle_2>
/ shape = circle
/ size = (350, 350)
/ hposition = 50%
/ vposition = 50%
</shape>

<text fixation_cross>
/ items = ("+")
/ position = (50%,50%)
/ color = snow
/ txbgcolor = (127, 127, 127)
/ fontstyle = ("Arial",50pt)
</text>

<list record_colour>
</list>

<list record_pairs>
</list>

<list record_start_colour>
</list>

<counter sequence_practice>
/ select = noreplace(1-81) 
/ selectionrate = trial
</counter>

<counter second_pass>
/ select = sequence(1-81)
/ selectionrate = trial
</counter>


********************************************************************************
********************************************************************************
Practice Trials
********************************************************************************
********************************************************************************
<trial practice_start>
/ timeout = values.fixationduration + 250 
/ stimulustimes = [
0 = fixation_cross, fixation_trigger; 
1000 = shape.circle_1
]
/ ontrialbegin = [
    shape.circle_1.color = list.colours.nextvalue;
	
	if(shape.circle_1.color == values.colour1){
	 trial.practice_start.insertstimulustime(port.colour1_trigger, 1000);
	} else if (shape.circle_1.color == values.colour2){
	 trial.practice_start.insertstimulustime(port.colour2_trigger, 1000);
	} else if (shape.circle_1.color == values.colour3){
	 trial.practice_start.insertstimulustime(port.colour3_trigger, 1000);
	} else if (shape.circle_1.color == values.colour4){
	 trial.practice_start.insertstimulustime(port.colour4_trigger, 1000);
	} else if (shape.circle_1.color == values.colour5){
	 trial.practice_start.insertstimulustime(port.colour5_trigger, 1000);
	} else if (shape.circle_1.color == values.colour6){
	 trial.practice_start.insertstimulustime(port.colour6_trigger, 1000);
	} else if (shape.circle_1.color == values.colour7){
	 trial.practice_start.insertstimulustime(port.colour7_trigger, 1000);
	} else if (shape.circle_1.color == values.colour8){
	 trial.practice_start.insertstimulustime(port.colour8_trigger, 1000);
	} else {trial.practice_start.insertstimulustime(port.colour9_trigger, 1000);}
]
/ ontrialend = [
    values.previous_colour = list.colours.currentvalue
]
/ recorddata = false
</trial>

<trial practice_1>
/ timeout = values.fixationduration + 250
/ stimulustimes = [
0 = fixation_cross, fixation_trigger;
1000 = shape.circle_1
]
/ ontrialbegin = [
	values.trial_number_practice += 1;
    shape.circle_1.color = list.colours.nextvalue;
	if(block.practice_block.trialcount == 1){
		values.previous_colour = values.previous_colour;} 
	else {values.previous_colour = list.record_colour.currentvalue;
};
    if(shape.circle_1.color == values.colour1){
	 trial.practice_1.insertstimulustime(port.colour1_trigger, 1000);
	} else if (shape.circle_1.color == values.colour2){
	 trial.practice_1.insertstimulustime(port.colour2_trigger, 1000);
	} else if (shape.circle_1.color == values.colour3){
	 trial.practice_1.insertstimulustime(port.colour3_trigger, 1000);
	} else if (shape.circle_1.color == values.colour4){
	 trial.practice_1.insertstimulustime(port.colour4_trigger, 1000);
	} else if (shape.circle_1.color == values.colour5){
	 trial.practice_1.insertstimulustime(port.colour5_trigger, 1000);
	} else if (shape.circle_1.color == values.colour6){
	 trial.practice_1.insertstimulustime(port.colour6_trigger, 1000);
	} else if (shape.circle_1.color == values.colour7){
	 trial.practice_1.insertstimulustime(port.colour7_trigger, 1000);
	} else if (shape.circle_1.color == values.colour8){
	 trial.practice_1.insertstimulustime(port.colour8_trigger, 1000);
	} else {trial.practice_1.insertstimulustime(port.colour9_trigger, 1000);}	
]
/ ontrialend = [
	 list.record_colour.appenditem(shape.circle_1.color);
	 values.current_colour =  shape.circle_1.color
]
/ branch = [trial.response_options_practice]
/ recorddata = false
</trial> 

********************************************************************************
********************************************************************************
Firstpass Trials
********************************************************************************
********************************************************************************

<trial firstpass_start>
/ timeout = values.fixationduration + 250 
/ stimulustimes = [
0 = fixation_cross, fixation_trigger; 
1000 = shape.circle_1
]
/ ontrialbegin = [
    shape.circle_1.color = list.colours.nextvalue;
	
	if(shape.circle_1.color == values.colour1){
	 trial.firstpass_start.insertstimulustime(port.colour1_trigger, 1000);
	} else if (shape.circle_1.color == values.colour2){
	 trial.firstpass_start.insertstimulustime(port.colour2_trigger, 1000);
	} else if (shape.circle_1.color == values.colour3){
	 trial.firstpass_start.insertstimulustime(port.colour3_trigger, 1000);
	} else if (shape.circle_1.color == values.colour4){
	 trial.firstpass_start.insertstimulustime(port.colour4_trigger, 1000);
	} else if (shape.circle_1.color == values.colour5){
	 trial.firstpass_start.insertstimulustime(port.colour5_trigger, 1000);
	} else if (shape.circle_1.color == values.colour6){
	 trial.firstpass_start.insertstimulustime(port.colour6_trigger, 1000);
	} else if (shape.circle_1.color == values.colour7){
	 trial.firstpass_start.insertstimulustime(port.colour7_trigger, 1000);
	} else if (shape.circle_1.color == values.colour8){
	 trial.firstpass_start.insertstimulustime(port.colour8_trigger, 1000);
	} else {trial.firstpass_start.insertstimulustime(port.colour9_trigger, 1000);}
]
/ ontrialend = [
    values.previous_colour = list.colours.currentvalue;
		list.record_start_colour.appenditem(shape.circle_1.color)
]
/ recorddata = false
</trial>

<trial firstpass_1>
/ timeout = values.fixationduration + 250
/ stimulustimes = [
0 = fixation_cross, fixation_trigger;
1000 = shape.circle_1
]
/ ontrialbegin = [
	values.trial_number += 1;
    expressions.colour_select;
	if(values.trial_number == 1){
		values.previous_colour = list.colours.currentvalue;} 
	else {values.previous_colour = list.record_colour.currentvalue;
};	
		if(shape.circle_1.color == values.colour1){
	 trial.firstpass_1.insertstimulustime(port.colour1_trigger, 1000);
	} else if (shape.circle_1.color == values.colour2){
	 trial.firstpass_1.insertstimulustime(port.colour2_trigger, 1000);
	} else if (shape.circle_1.color == values.colour3){
	 trial.firstpass_1.insertstimulustime(port.colour3_trigger, 1000);
	} else if (shape.circle_1.color == values.colour4){
	 trial.firstpass_1.insertstimulustime(port.colour4_trigger, 1000);
	} else if (shape.circle_1.color == values.colour5){
	 trial.firstpass_1.insertstimulustime(port.colour5_trigger, 1000);
	} else if (shape.circle_1.color == values.colour6){
	 trial.firstpass_1.insertstimulustime(port.colour6_trigger, 1000);
	} else if (shape.circle_1.color == values.colour7){
	 trial.firstpass_1.insertstimulustime(port.colour7_trigger, 1000);
	} else if (shape.circle_1.color == values.colour8){
	 trial.firstpass_1.insertstimulustime(port.colour8_trigger, 1000);
	} else {trial.firstpass_1.insertstimulustime(port.colour9_trigger, 1000);}
]
/ ontrialend = [
	 list.record_colour.appenditem(shape.circle_1.color);
	 values.current_colour =  shape.circle_1.color
]
/ branch = [trial.response_options]
/ recorddata = false
</trial> 

<trial firstpass_2>
/ stimulustimes = [
0 = fixation_cross, fixation_trigger;
1000 = shape.circle_2]
/ timeout = values.fixationduration + 250
/ ontrialbegin = [
	values.trial_number += 1;
	values.previous_colour = list.record_colour.currentvalue;
	shape.circle_2.color = list.record_pairs.nextvalue;

	if(shape.circle_2.color == values.colour1){
	 trial.firstpass_2.insertstimulustime(port.colour1_trigger, 1000);
	} else if (shape.circle_2.color == values.colour2){
	 trial.firstpass_2.insertstimulustime(port.colour2_trigger, 1000);
	} else if (shape.circle_2.color == values.colour3){
	 trial.firstpass_2.insertstimulustime(port.colour3_trigger, 1000);
	} else if (shape.circle_2.color == values.colour4){
	 trial.firstpass_2.insertstimulustime(port.colour4_trigger, 1000);
	} else if (shape.circle_2.color == values.colour5){
	 trial.firstpass_2.insertstimulustime(port.colour5_trigger, 1000);
	} else if (shape.circle_2.color == values.colour6){
	 trial.firstpass_2.insertstimulustime(port.colour6_trigger, 1000);
	} else if (shape.circle_2.color == values.colour7){
	 trial.firstpass_2.insertstimulustime(port.colour7_trigger, 1000);
	} else if (shape.circle_2.color == values.colour8){
	 trial.firstpass_2.insertstimulustime(port.colour8_trigger, 1000);
	} else {trial.firstpass_2.insertstimulustime(port.colour9_trigger, 1000);}		
]
/ ontrialend = [
	 list.record_colour.appenditem(shape.circle_2.color);
	 values.current_colour = shape.circle_2.color
]
/ branch = [trial.response_options]
/ recorddata = false
</trial> 

********************************************************************************
********************************************************************************
Secondpass Trials
********************************************************************************
********************************************************************************
<trial secondpass_start>
/ timeout = values.fixationduration + 250 
/ stimulustimes = [
0 = fixation_cross, fixation_trigger; 
1000 = shape.circle_1
]
/ ontrialbegin = [
    shape.circle_1.color = list.record_start_colour.nextvalue;
	
		if(shape.circle_1.color == values.colour1){
	 trial.secondpass_start.insertstimulustime(port.colour1_trigger, 1000);
	} else if (shape.circle_1.color == values.colour2){
	 trial.secondpass_start.insertstimulustime(port.colour2_trigger, 1000);
	} else if (shape.circle_1.color == values.colour3){
	 trial.secondpass_start.insertstimulustime(port.colour3_trigger, 1000);
	} else if (shape.circle_1.color == values.colour4){
	 trial.secondpass_start.insertstimulustime(port.colour4_trigger, 1000);
	} else if (shape.circle_1.color == values.colour5){
	 trial.secondpass_start.insertstimulustime(port.colour5_trigger, 1000);
	} else if (shape.circle_1.color == values.colour6){
	 trial.secondpass_start.insertstimulustime(port.colour6_trigger, 1000);
	} else if (shape.circle_1.color == values.colour7){
	 trial.secondpass_start.insertstimulustime(port.colour7_trigger, 1000);
	} else if (shape.circle_1.color == values.colour8){
	 trial.secondpass_start.insertstimulustime(port.colour8_trigger, 1000);
	} else {trial.secondpass_start.insertstimulustime(port.colour9_trigger, 1000);}
]
/ ontrialend = [
    values.previous_colour = list.record_start_colour.currentvalue
]
/ recorddata = false
</trial>

<trial secondpass_1>
/ timeout = values.fixationduration + 250
/ stimulustimes = [
0 = fixation_cross, fixation_trigger;
1000 = shape.circle_1
]
/ ontrialbegin = [
	values.trial_number += 1;
    expressions.colour_select_2;
	if(values.trial_number == 1){
		values.previous_colour = list.record_start_colour.currentvalue;} 
	else {values.previous_colour = list.record_colour.currentvalue;
};
	if(shape.circle_1.color == values.colour1){
	 trial.secondpass_1.insertstimulustime(port.colour1_trigger, 1000);
	} else if (shape.circle_1.color == values.colour2){
	 trial.secondpass_1.insertstimulustime(port.colour2_trigger, 1000);
	} else if (shape.circle_1.color == values.colour3){
	 trial.secondpass_1.insertstimulustime(port.colour3_trigger, 1000);
	} else if (shape.circle_1.color == values.colour4){
	 trial.secondpass_1.insertstimulustime(port.colour4_trigger, 1000);
	} else if (shape.circle_1.color == values.colour5){
	 trial.secondpass_1.insertstimulustime(port.colour5_trigger, 1000);
	} else if (shape.circle_1.color == values.colour6){
	 trial.secondpass_1.insertstimulustime(port.colour6_trigger, 1000);
	} else if (shape.circle_1.color == values.colour7){
	 trial.secondpass_1.insertstimulustime(port.colour7_trigger, 1000);
	} else if (shape.circle_1.color == values.colour8){
	 trial.secondpass_1.insertstimulustime(port.colour8_trigger, 1000);
	} else {trial.secondpass_1.insertstimulustime(port.colour9_trigger, 1000);}
]
/ ontrialend = [
	 list.record_colour.appenditem(shape.circle_1.color);
	 values.current_colour =  shape.circle_1.color
]
/ branch = [trial.response_options]
/ recorddata = false
</trial> 

<trial secondpass_2>
/ stimulustimes = [
0 = fixation_cross, fixation_trigger;
1000 = shape.circle_2]
/ timeout = values.fixationduration + 250
/ ontrialbegin = [
	values.trial_number += 1;
	values.previous_colour = list.record_colour.currentvalue;
	shape.circle_2.color = list.record_pairs.nextvalue;
	
		if(shape.circle_2.color == values.colour1){
	 trial.secondpass_2.insertstimulustime(port.colour1_trigger, 1000);
	} else if (shape.circle_2.color == values.colour2){
	 trial.secondpass_2.insertstimulustime(port.colour2_trigger, 1000);
	} else if (shape.circle_2.color == values.colour3){
	 trial.secondpass_2.insertstimulustime(port.colour3_trigger, 1000);
	} else if (shape.circle_2.color == values.colour4){
	 trial.secondpass_2.insertstimulustime(port.colour4_trigger, 1000);
	} else if (shape.circle_2.color == values.colour5){
	 trial.secondpass_2.insertstimulustime(port.colour5_trigger, 1000);
	} else if (shape.circle_2.color == values.colour6){
	 trial.secondpass_2.insertstimulustime(port.colour6_trigger, 1000);
	} else if (shape.circle_2.color == values.colour7){
	 trial.secondpass_2.insertstimulustime(port.colour7_trigger, 1000);
	} else if (shape.circle_2.color == values.colour8){
	 trial.secondpass_2.insertstimulustime(port.colour8_trigger, 1000);
	} else {trial.secondpass_2.insertstimulustime(port.colour9_trigger, 1000);}		
]
/ ontrialend = [
	 list.record_colour.appenditem(shape.circle_2.color);
	 values.current_colour = shape.circle_2.color
]
/ branch = [trial.response_options]
/ recorddata = false
</trial> 

********************************************************************************
********************************************************************************
Demographics Survey
********************************************************************************
********************************************************************************

<surveypage demographic_page>
/ caption = "You have now finished the trials. Before you finish the experiment, we would like you to complete the following questions please."
/ fontstyle =  ("Arial", 3%)
/ showquestionnumbers = false
/ showpagenumbers = false
/ questions = [1=sex; 2=age; 3=nationality; 4=education; 5=acuity; 6=colourimpairment; 7=colour_response]
/ navigationbuttonsize = (20, 4)
/ navigationbuttonfontstyle = ("Arial", 2%, true, false, false, false, 5, 0)
/ nextbuttonposition = (40%,  values.demo_starting_y_offset + 12*values.demo_gap)
/ response = correct
/ finishlabel = "Complete"
</surveypage>


********************************************************************************
********************************************************************************
Blocks
********************************************************************************
********************************************************************************
<block intro>
/ preinstructions = (overview)
</block>


<block trial_instructions>
/ preinstructions = (trial_instructions)
</block>


<block practice_block>
/ preinstructions = (practice_instructions)
/ trials = [1=practice_start; 2-11 = practice_1]
</block>


<block firstpass>
/ trials = [1=firstpass_start; 2-82 = sequence(firstpass_1, firstpass_2)]
/ onblockbegin = [
    values.trial_number = 0]
</block>


<block secondpass>
/ preinstructions = (finish_block)
/ postinstructions = (finish_block)
/ onblockbegin = [
	values.trial_number = 0]
/ trials = [1=secondpass_start; 2-82 = sequence(secondpass_1, secondpass_2)]
/ onblockend = [
    item.record_sequence.clearitems();]
</block>


<block demographics>
/trials = [1=demographic_page]	
</block>

********************************************************************************
********************************************************************************
Experiment 
********************************************************************************
********************************************************************************
<expt>
/onexptend = [values.completed = 1]
/blocks = [ 1=intro; 2=practice_block; 3=trial_instructions; 4-8=sequence(firstpass, secondpass); 9=demographics]
</expt>

